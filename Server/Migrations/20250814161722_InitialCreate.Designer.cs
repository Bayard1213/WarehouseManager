// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WarehouseManager.Server.Models;

#nullable disable

namespace WarehouseManager.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814161722_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WarehouseManager.Server.Models.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.HasKey("Id")
                        .HasName("balances_pkey");

                    b.HasIndex(new[] { "MeasureId" }, "idx_balances_measure_id");

                    b.HasIndex(new[] { "ResourceId" }, "idx_balances_resource_id");

                    b.HasIndex(new[] { "ResourceId", "MeasureId" }, "unique_resource_measure")
                        .IsUnique();

                    b.ToTable("balances", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("clients_pkey");

                    b.HasIndex(new[] { "Name" }, "clients_name_key")
                        .IsUnique();

                    b.ToTable("clients", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.DocumentsReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateReceipt")
                        .HasColumnType("date")
                        .HasColumnName("date_receipt");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("documents_receipt_pkey");

                    b.HasIndex(new[] { "Number" }, "documents_receipt_number_key")
                        .IsUnique();

                    b.ToTable("documents_receipt", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.DocumentsShipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateOnly>("DateShipment")
                        .HasColumnType("date")
                        .HasColumnName("date_shipment");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("documents_shipment_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex(new[] { "Number" }, "documents_shipment_number_key")
                        .IsUnique();

                    b.ToTable("documents_shipment", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.Measure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("measures_pkey");

                    b.HasIndex(new[] { "Name" }, "measures_name_key")
                        .IsUnique();

                    b.ToTable("measures", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.ReceiptResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("document_receipt_id");

                    b.Property<int>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.HasKey("Id")
                        .HasName("receipt_resources_pkey");

                    b.HasIndex("DocumentReceiptId");

                    b.HasIndex(new[] { "MeasureId" }, "idx_receipt_resources_measure_id");

                    b.HasIndex(new[] { "ResourceId" }, "idx_receipt_resources_resource_id");

                    b.ToTable("receipt_resources", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("resources_pkey");

                    b.HasIndex(new[] { "Name" }, "resources_name_key")
                        .IsUnique();

                    b.ToTable("resources", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.ShipmentResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentShipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_shipment_id");

                    b.Property<int>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.HasKey("Id")
                        .HasName("shipment_resources_pkey");

                    b.HasIndex("DocumentShipmentId");

                    b.HasIndex(new[] { "MeasureId" }, "idx_shipment_resources_measure_id");

                    b.HasIndex(new[] { "ResourceId" }, "idx_shipment_resources_resource_id");

                    b.ToTable("shipment_resources", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.VBalance", b =>
                {
                    b.Property<decimal?>("BalanceQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_quantity");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_id");

                    b.Property<string>("MeasureName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("measure_name");

                    b.Property<int?>("MeasureStatus")
                        .HasColumnType("integer")
                        .HasColumnName("measure_status");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<string>("ResourceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resource_name");

                    b.Property<int?>("ResourceStatus")
                        .HasColumnType("integer")
                        .HasColumnName("resource_status");

                    b.ToTable((string)null);

                    b.ToView("v_balance", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.VReceiptDocumentResource", b =>
                {
                    b.Property<int?>("DocumentReceiptId")
                        .HasColumnType("integer")
                        .HasColumnName("document_receipt_id");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_id");

                    b.Property<string>("MeasureName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("measure_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("ReceiptResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("receipt_resource_id");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<string>("ResourceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resource_name");

                    b.ToTable((string)null);

                    b.ToView("v_receipt_document_resource", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.VShipmentDocumentResource", b =>
                {
                    b.Property<int?>("DocumentShipmentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_shipment_id");

                    b.Property<int?>("MeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_id");

                    b.Property<string>("MeasureName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("measure_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("resource_id");

                    b.Property<string>("ResourceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("resource_name");

                    b.Property<int?>("ShipmentResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("shipment_resource_id");

                    b.ToTable((string)null);

                    b.ToView("v_shipment_document_resource", "public");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.Balance", b =>
                {
                    b.HasOne("WarehouseManager.Server.Models.Measure", "Measure")
                        .WithMany("Balances")
                        .HasForeignKey("MeasureId")
                        .IsRequired()
                        .HasConstraintName("balances_measure_id_fkey");

                    b.HasOne("WarehouseManager.Server.Models.Resource", "Resource")
                        .WithMany("Balances")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("balances_resource_id_fkey");

                    b.Navigation("Measure");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.DocumentsShipment", b =>
                {
                    b.HasOne("WarehouseManager.Server.Models.Client", "Client")
                        .WithMany("DocumentsShipments")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("documents_shipment_client_id_fkey");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.ReceiptResource", b =>
                {
                    b.HasOne("WarehouseManager.Server.Models.DocumentsReceipt", "DocumentReceipt")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("DocumentReceiptId")
                        .IsRequired()
                        .HasConstraintName("receipt_resources_document_receipt_id_fkey");

                    b.HasOne("WarehouseManager.Server.Models.Measure", "Measure")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("MeasureId")
                        .IsRequired()
                        .HasConstraintName("receipt_resources_measure_id_fkey");

                    b.HasOne("WarehouseManager.Server.Models.Resource", "Resource")
                        .WithMany("ReceiptResources")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("receipt_resources_resource_id_fkey");

                    b.Navigation("DocumentReceipt");

                    b.Navigation("Measure");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.ShipmentResource", b =>
                {
                    b.HasOne("WarehouseManager.Server.Models.DocumentsShipment", "DocumentShipment")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("DocumentShipmentId")
                        .IsRequired()
                        .HasConstraintName("shipment_resources_document_shipment_id_fkey");

                    b.HasOne("WarehouseManager.Server.Models.Measure", "Measure")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("MeasureId")
                        .IsRequired()
                        .HasConstraintName("shipment_resources_measure_id_fkey");

                    b.HasOne("WarehouseManager.Server.Models.Resource", "Resource")
                        .WithMany("ShipmentResources")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("shipment_resources_resource_id_fkey");

                    b.Navigation("DocumentShipment");

                    b.Navigation("Measure");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.Client", b =>
                {
                    b.Navigation("DocumentsShipments");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.DocumentsReceipt", b =>
                {
                    b.Navigation("ReceiptResources");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.DocumentsShipment", b =>
                {
                    b.Navigation("ShipmentResources");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.Measure", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("ShipmentResources");
                });

            modelBuilder.Entity("WarehouseManager.Server.Models.Resource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("ReceiptResources");

                    b.Navigation("ShipmentResources");
                });
#pragma warning restore 612, 618
        }
    }
}
