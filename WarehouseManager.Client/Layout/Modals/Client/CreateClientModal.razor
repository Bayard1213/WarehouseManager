@inject ModalFormService ModalFormService
@inject HttpClient Http
@inject NotificationService NotificationService
@inject ModalFormService ModalFormService

@using WarehouseManager.Shared.Api
@using WarehouseManager.Shared.Enums
@using WarehouseManager.Shared.Dtos.Client

@if (ModalFormService.IsVisible && ModalFormService.Model is CreateClientDto clientModel)
{
    <div class="modal fade show d-block" tabindex="-1"
         style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@ModalFormService.Title</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>

                <div class="modal-body">
                    <EditForm Model="@clientModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Имя</label>
                            <InputText class="@(isNameValid ? "form-control in-valid" : "form-control is-invalid")"
                                       @bind-Value="clientModel.Name"
                                       @onblur="async () => await CheckNameAsync(clientModel.Name)" />
                            <ValidationMessage For="@(() => clientModel.Name)" />
                            @if (!string.IsNullOrEmpty(nameCheckError))
                            {
                                <div class="text-danger">@nameCheckError</div>
                            }
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Адрес</label>
                            <InputText class="form-control" @bind-Value="clientModel.Address" />
                            <ValidationMessage For="@(() => clientModel.Address)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Статус</label>
                            <InputSelect class="form-select" @bind-Value="clientModel.Status">
                                <option value="@EntityStatus.Active">Активен</option>
                                <option value="@EntityStatus.Archived">В архиве</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => clientModel.Status)" />
                        </div>

                        <div class="mt-3">
                            <button type="submit" class="btn btn-primary" disabled="@(!isNameValid || isSubmitting)">
                                Сохранить
                            </button>
                            <button type="button" class="btn btn-secondary"
                                    @onclick="Close"
                                    disabled="@isSubmitting">
                                Отмена
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string? nameCheckError;
    private bool isNameValid = true;
    private bool isSubmitting = false;
    private string? originalName;

    private async Task CheckNameAsync(string clientName)
    {
        if (string.Equals(originalName, clientName))
        {
            nameCheckError = null;
            isNameValid = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(clientName))
        {
            nameCheckError = "Имя не может быть пустым";
            isNameValid = false;
            return;
        }

        var resp = await Http.GetFromJsonAsync<ApiResponse<bool>>(
            $"api/Client/check-name?name={Uri.EscapeDataString(clientName)}");

        if (resp is null)
        {
            nameCheckError = "Ошибка проверки уникальности имени";
            isNameValid = false;
        }
        else
        {
            nameCheckError = resp.Success && resp.Data ? null : resp.Message;
            isNameValid = resp.Data;
        }
        if (!isNameValid)
            NotificationService.Show(resp?.Message ?? "Ошибка проверки", isNameValid);
    }


    private async Task HandleValidSubmit()
    {
        if (ModalFormService.OnSubmitAsync is null) return;

        isSubmitting = true;
        try
        {
            await ModalFormService.OnSubmitAsync(ModalFormService.Model!);
            ModalFormService.Close();
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Close()
    {
        originalName = "";
        if (!isSubmitting)
            ModalFormService.Close();
    }

    private void OnModalFormChange()
    {
        originalName = ModalFormService.OriginalName ?? string.Empty;

        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        ModalFormService.OnChange += StateHasChanged;
        ModalFormService.OnChange += OnModalFormChange;
    }
    public void Dispose()
    {
        ModalFormService.OnChange -= StateHasChanged;
        ModalFormService.OnChange -= OnModalFormChange;
    }
}
