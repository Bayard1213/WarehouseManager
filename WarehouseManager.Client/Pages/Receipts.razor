@page "/receipts"

@inject HttpClient Http
@inject NotificationService NotificationService
@inject ModalFormService ModalFormService

@using WarehouseManager.Shared.Api
@using WarehouseManager.Shared.Dtos.Receipt
@using WarehouseManager.Shared.Dtos.Measure
@using WarehouseManager.Shared.Dtos.Resource
@using WarehouseManager.Client.Layout.Components
@using WarehouseManager.Client.Layout.Modals.Receipt

<PageTitle>Поступления</PageTitle>
<h3>Поступления</h3>
<CreateReceiptModal/>
<UpdateReceiptModal/>

<EditForm Model="@filter" OnValidSubmit="LoadReceipts">
    <div class="d-flex flex-wrap gap-3 m-3">
        <div style="flex: 1 1 200px;">
            <label>Ресурсы</label>
            <MultiSelect Items="@allResourcesSelectItems" SelectedItems="@selectedResources" SelectedItemsChanged="OnResourcesChanged" />
        </div>
        <div style="flex: 1 1 200px;">
            <label>Единицы измерения</label>
            <MultiSelect Items="@allMeasuresSelectItems" SelectedItems="@selectedMeasures" SelectedItemsChanged="OnMeasuresChanged" />
        </div>
        <div style="flex: 1 1 200px;">
            <label>Номера документов (через запятую)</label>
            <input class="form-control" @bind="documentNumbersInput" />
        </div>
        <div style="flex: 1 1 200px;">
            <label>Дата с</label>
            <InputDate @bind-Value="filter.DateFrom" class="form-control" />
        </div>
        <div style="flex: 1 1 200px;">
            <label>Дата по</label>
            <InputDate @bind-Value="filter.DateTo" class="form-control" />
        </div>
    </div>
    <div class="m-3">
        <button class="btn btn-primary" type="submit">Применить фильтр</button>
        <button class="btn btn-primary ms-3" @onclick="CreateReceipt">Добавить</button>
    </div>
</EditForm>

@if (isLoading)
{
    <p><em>Загрузка...</em></p>
}
else if (receipts is null)
{
    <p>Данные не загружены</p>
}
else if (!receipts.Any())
{
    <p>Нет данных по фильтру</p>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Номер документа</th>
                <th>Дата получения</th>
                <th>Ресурсы</th>
                <th>Действие</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var receipt in receipts)
            {
                <tr>
                    <td>@receipt.DocumentNumber</td>
                    <td>@receipt.DateReceipt.ToString("dd.MM.yyyy")</td>
                    <td>
                        <table class="table table-sm table-borderless mb-0">
                            <thead>
                                <tr>
                                    <th>Ресурс</th>
                                    <th>Ед. измерения</th>
                                    <th>Количество</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var resource in receipt.ReceiptResources ?? Enumerable.Empty<ReceiptResourcesDto>())
                                {
                                    <tr>
                                        <td>@resource.ResourceName</td>
                                        <td>@resource.MeasureName</td>
                                        <td>@resource.Quantity</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                    <td class="align-items-center justify-content-end">
                        <button class="btn btn-primary btn-sm me-1" @onclick="() => UpdateReceipt(receipt)" title="Редактировать">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteReceipt(receipt.DocumentId)" title="Удалить">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ReceiptFilterDto filter = new();
    private List<ReceiptWithResourcesDto>? receipts;

    private List<ResourceDto> allResources = new();
    private List<MeasureDto> allMeasures = new();

    private List<MultiSelect.SelectItem> allResourcesSelectItems = new();
    private List<MultiSelect.SelectItem> allMeasuresSelectItems = new();

    private List<MultiSelect.SelectItem> selectedResources = new();
    private List<MultiSelect.SelectItem> selectedMeasures = new();

    private bool isLoading = false;

    private string documentNumbersInput = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        allResources = await LoadAllResourcesAsync();
        allMeasures = await LoadAllMeasuresAsync();

        allResourcesSelectItems = allResources.Select(r => new MultiSelect.SelectItem { Id = r.Id, Name = r.Name }).ToList();
        allMeasuresSelectItems = allMeasures.Select(m => new MultiSelect.SelectItem { Id = m.Id, Name = m.Name }).ToList();

        await LoadReceipts();
    }

    private async Task LoadReceipts()
    {
        isLoading = true;
        try
        {
            filter.ResourceIds = selectedResources.Select(i => i.Id).ToList();
            filter.MeasureIds = selectedMeasures.Select(i => i.Id).ToList();

            filter.DocumentNumbers = documentNumbersInput
                .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                .Where(s => !string.IsNullOrWhiteSpace(s))
                .ToList();

            var query = new List<string>();

            if (filter.DateFrom.HasValue)
                query.Add($"DateFrom={filter.DateFrom.Value:yyyy-MM-dd}");

            if (filter.DateTo.HasValue)
                query.Add($"DateTo={filter.DateTo.Value:yyyy-MM-dd}");

            if (filter.DocumentNumbers?.Any() == true)
                query.AddRange(filter.DocumentNumbers.Select(num => $"DocumentNumbers={Uri.EscapeDataString(num)}"));

            if (filter.ResourceIds?.Any() == true)
                query.AddRange(filter.ResourceIds.Select(id => $"ResourceIds={id}"));

            if (filter.MeasureIds?.Any() == true)
                query.AddRange(filter.MeasureIds.Select(id => $"MeasureIds={id}"));

            var queryString = query.Any() ? "?" + string.Join("&", query) : string.Empty;

            var response = await Http.GetFromJsonAsync<ApiResponse<List<ReceiptWithResourcesDto>>>($"api/Receipt{queryString}");

            if (response?.Success == true)
                receipts = response.Data ?? new();
            else
                receipts = new List<ReceiptWithResourcesDto>();
        }
        catch (Exception ex)
        {
            NotificationService.Show($"Ошибка загрузки поступлений: {ex.Message}", false);
            receipts = new List<ReceiptWithResourcesDto>();
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private void CreateReceipt()
    {
        ModalFormService.Open<CreateReceiptDto>(
            "Добавить документ поступления",
            async (dto) =>
            {
                var resp = await Http.PostAsJsonAsync("api/Receipt", dto);
                var apiResp = await resp.Content.ReadFromJsonAsync<ApiResponse<ReceiptWithResourcesDto>>();

                NotificationService.Show(apiResp?.Message ?? "Неизвестная ошибка", apiResp?.Success ?? false);

                if (apiResp?.Success == true)
                {
                    NotificationService.Show(apiResp?.Message ?? "Документ поступления успешно добавлен", apiResp?.Success ?? true);

                    await LoadReceipts();
                }
            });
    }

    private void UpdateReceipt(ReceiptWithResourcesDto receipt)
    {
        var resourcesModel = new List<UpdateReceiptResourcesDto>();
        
        foreach (var resource in receipt.ReceiptResources ?? Enumerable.Empty<ReceiptResourcesDto>())
        {
            resourcesModel.Add(new UpdateReceiptResourcesDto
            {
                Id = resource.Id,
                ResourceId = resource.ResourceId,
                MeasureId = resource.MeasureId,
                Quantity = resource.Quantity
            });
        }

        var documentModel = new UpdateReceiptDto
        {
            DocumentNumber = receipt.DocumentNumber,
            DateReceipt = receipt.DateReceipt,
            ReceiptResources = resourcesModel
        };

        ModalFormService.Open<UpdateReceiptDto>(
            "Редактировать документ поступления",
            async (dto) =>
            {
                var resp = await Http.PutAsJsonAsync($"api/Receipt/{receipt.DocumentId}", dto);
                var apiResp = await resp.Content.ReadFromJsonAsync<ApiResponse>();

                NotificationService.Show(apiResp?.Message ?? "Неизвестная ошибка", apiResp?.Success ?? false);

                if(apiResp?.Success == true)
                {
                    NotificationService.Show(apiResp?.Message ?? "Документ успешно обновлен", apiResp?.Success ?? true);
                    await LoadReceipts();
                }
            },
            documentModel
        );
    }

    private async Task DeleteReceipt(int id)
    {
        var resp = await Http.DeleteAsync($"api/Receipt/{id}");
        var apiResp = await resp.Content.ReadFromJsonAsync<ApiResponse>();
        NotificationService.Show(apiResp?.Message ?? "Ошибка удаления документа поступления", apiResp?.Success ?? false);

        if (apiResp?.Success == true)
            await LoadReceipts();
    }

    private Task OnResourcesChanged(List<MultiSelect.SelectItem> selected)
    {
        selectedResources = selected;
        return Task.CompletedTask;
    }

    private Task OnMeasuresChanged(List<MultiSelect.SelectItem> selected)
    {
        selectedMeasures = selected;
        return Task.CompletedTask;
    }

    private async Task<List<ResourceDto>> LoadAllResourcesAsync()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse<List<ResourceDto>>>("api/Resource/all");
        return response?.Data ?? new();
    }

    private async Task<List<MeasureDto>> LoadAllMeasuresAsync()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse<List<MeasureDto>>>("api/Measure/all");
        return response?.Data ?? new();
    }
}